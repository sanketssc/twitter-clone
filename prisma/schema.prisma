// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  Account       Account[]
  Session       Session[]

  @@map("users")
}

model Profile {
  id        String     @id @default(cuid()) @map("_id")
  firstname String
  lastname  String
  email     String     @unique
  username  String     @unique
  image     String?
  createdAt DateTime   @default(now()) @map("created_at")
  followers Follows[]  @relation("following")
  following Follows[]  @relation("followers")
  posts     Post[]
  likes     Like[]
  bookmarks Bookmark[]
  retweets  Retweet[]

  @@map("profiles")
}

model Follows {
  id          String  @id @default(cuid()) @map("_id")
  follower    Profile @relation("following", fields: [followerId], references: [id])
  followerId  String  @map("follower_id")
  following   Profile @relation("followers", fields: [followingId], references: [id])
  followingId String  @map("following_id")
}

//make post and comment schema where comments can have comments too
model Post {
  id        String     @id @default(cuid()) @map("_id")
  content   String?
  imageUrl  String?
  author    Profile    @relation(fields: [authorId], references: [id])
  authorId  String     @map("author_id")
  comments  Post[]     @relation("PostToPost")
  parent    Post?      @relation("PostToPost", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId  String?    @map("parent_id")
  createdAt DateTime   @default(now()) @map("created_at")
  likes     Like[]
  bookmarks Bookmark[]
  retweets  Retweet[]

  @@map("posts")
}

model Like {
  id        String   @id @default(cuid()) @map("_id")
  user      Profile  @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("likes")
}

model Bookmark {
  id        String   @id @default(cuid()) @map("_id")
  user      Profile  @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("bookmarks")
}

model Retweet {
  id        String   @id @default(cuid()) @map("_id")
  user      Profile  @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("retweets")
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@map("verificationtokens")
}
